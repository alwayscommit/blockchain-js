{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//pragma\npragma solidity ^0.8.0;\n\n//imports\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n//hardhat has console.log()\n// import \"hardhat/console.sol\";\n\n//Error Codes, best practice to include contract name to not be confused between different error codes\nerror FundMe__NotOwner();\n\n//Interfaces, Libraries, Contracts\n\n/** @title A contract for crowd funding\n *  @author alwayscommit\n *  @notice Sample crowd funding contract\n *  @dev Implements price feeds for our library\n */\ncontract FundMe {\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    uint256 public constant MIN_USD = 50 * 10**18;\n\n    //s_storageVariables\n    mapping(address => uint256) public s_addressAmountMap;\n    address[] private s_funders;\n    address private immutable i_owner;\n    AggregatorV3Interface private s_priceFeed;\n\n    //modifiers\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    //contructor\n    //receive\n    //fallback\n    //external\n    //public\n    //internal\n    //private\n    //view/pure\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     *  @notice Funds this contract\n     */\n    function fund() public payable {\n        // require(\n        //     msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n        //     \"You need to fund more ETH!\"\n        // );\n        s_addressAmountMap[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public payable onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n        bool isSuccess = payable(msg.sender).send(address(this).balance);\n        require(isSuccess, \"Send failed!\");\n        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed!\");\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressAmountMap[funder] = 0;\n        }\n        s_funders = new address[](0);\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        //mappings can't be in memory\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressAmountMap[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    //we do not want outside world to know variables like s_funders, etc because it doesn't make sense to them\n    //s_ is important for us, not them, thus we make them private and expose these public methods for the same\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressAmount(address funder) public view returns (uint256) {\n        return s_addressAmountMap[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer * 10000000000);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}