{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressAmountMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xec5e1a3994861cdbaa656af3dc040bcadae92313ff1a6197af7af9a78638da2d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1119732",
    "logsBloom": "0x
    "blockHash": "0x8541c7ee34e7dfda220d41ba7232498eda9e481e69f7b457cd3dc599867c98a1",
    "transactionHash": "0xec5e1a3994861cdbaa656af3dc040bcadae92313ff1a6197af7af9a78638da2d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1119732",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "17466f2595e1ce6617fc6bf6c13d0549",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"alwayscommit\",\"details\":\"Implements price feeds for our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds this contract\"}},\"notice\":\"Sample crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.0;\\n\\n//imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//hardhat has console.log()\\n// import \\\"hardhat/console.sol\\\";\\n\\n//Error Codes, best practice to include contract name to not be confused between different error codes\\nerror FundMe__NotOwner();\\n\\n//Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd funding\\n *  @author alwayscommit\\n *  @notice Sample crowd funding contract\\n *  @dev Implements price feeds for our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant MIN_USD = 50 * 10**18;\\n\\n    //s_storageVariables\\n    mapping(address => uint256) public s_addressAmountMap;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //contructor\\n    //receive\\n    //fallback\\n    //external\\n    //public\\n    //internal\\n    //private\\n    //view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice Funds this contract\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\\n            \\\"You need to fund more ETH!\\\"\\n        );\\n        s_addressAmountMap[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n        bool isSuccess = payable(msg.sender).send(address(this).balance);\\n        require(isSuccess, \\\"Send failed!\\\");\\n        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed!\\\");\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressAmountMap[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressAmountMap[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    //we do not want outside world to know variables like s_funders, etc because it doesn't make sense to them\\n    //s_ is important for us, not them, thus we make them private and expose these public methods for the same\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressAmount(address funder) public view returns (uint256) {\\n        return s_addressAmountMap[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x09cb1ff500ebd73b0cb7bcb2331c928eb73da9cc1668344794f0327f94e706cc\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x3233cea6413f3c7ca336811456b3cfd88f6dea7f8e5a8685c00922b6dee8fe38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200146c3803806200146c833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112e6620001866000396000818161034201528181610660015281816106b001526108a601526112e66000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063be2693f014610175578063d7b4750c1461017f578063f9a20fe3146101bc57610099565b8063213dbea2146100a35780633ccfd60b146100ce57806348a25b49146100d8578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100b8610333565b6040516100c59190610b68565b60405180910390f35b6100d6610340565b005b3480156100e457600080fd5b506100ff60048036038101906100fa9190610be6565b610644565b60405161010c9190610b68565b60405180910390f35b34801561012157600080fd5b5061012a61065c565b6040516101379190610c22565b60405180910390f35b34801561014c57600080fd5b50610155610684565b6040516101629190610c9c565b60405180910390f35b6101736101f9565b005b61017d6106ae565b005b34801561018b57600080fd5b506101a660048036038101906101a19190610ce3565b61093c565b6040516101b39190610c22565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610be6565b610984565b6040516101f09190610b68565b60405180910390f35b6802b5e3af16b1880000610238600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109cc90919063ffffffff16565b1015610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610d6d565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c79190610dbc565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561040b573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610e5e565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff16476040516104ac90610eaf565b60006040518083038185875af1925050503d80600081146104e9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ee565b606091505b509150915081610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610f10565b60405180910390fd5b60005b6001805490508110156105de5760006001828154811061055957610558610f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105d690610f5f565b915050610536565b50600067ffffffffffffffff8111156105fa576105f9610fa8565b5b6040519080825280602002602001820160405280156106285781602001602082028036833780820191505090505b506001908051906020019061063e929190610aa8565b50505050565b60006020528060005260406000206000915090505481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610733576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076d575b5050505050905060005b81518110156108415760008282815181106107df576107de610f30565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083990610f5f565b9150506107c1565b50600067ffffffffffffffff81111561085d5761085c610fa8565b5b60405190808252806020026020018201604052801561088b5781602001602082028036833780820191505090505b50600190805190602001906108a1929190610aa8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e890610eaf565b60006040518083038185875af1925050503d8060008114610925576040519150601f19603f3d011682016040523d82523d6000602084013e61092a565b606091505b505090508061093857600080fd5b5050565b60006001828154811061095257610951610f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806109d883610a08565b90506000670de0b6b3a764000085836109f19190610fd7565b6109fb9190611060565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a89919061111e565b5050509150506402540be40081610aa09190611199565b915050919050565b828054828255906000526020600020908101928215610b21579160200282015b82811115610b205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac8565b5b509050610b2e9190610b32565b5090565b5b80821115610b4b576000816000905550600101610b33565b5090565b6000819050919050565b610b6281610b4f565b82525050565b6000602082019050610b7d6000830184610b59565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb382610b88565b9050919050565b610bc381610ba8565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610b83565b5b6000610c0a84828501610bd1565b91505092915050565b610c1c81610ba8565b82525050565b6000602082019050610c376000830184610c13565b92915050565b6000819050919050565b6000610c62610c5d610c5884610b88565b610c3d565b610b88565b9050919050565b6000610c7482610c47565b9050919050565b6000610c8682610c69565b9050919050565b610c9681610c7b565b82525050565b6000602082019050610cb16000830184610c8d565b92915050565b610cc081610b4f565b8114610ccb57600080fd5b50565b600081359050610cdd81610cb7565b92915050565b600060208284031215610cf957610cf8610b83565b5b6000610d0784828501610cce565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f2066756e64206d6f72652045544821000000000000600082015250565b6000610d57601a83610d10565b9150610d6282610d21565b602082019050919050565b60006020820190508181036000830152610d8681610d4a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc782610b4f565b9150610dd283610b4f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0757610e06610d8d565b5b828201905092915050565b7f53656e64206661696c6564210000000000000000000000000000000000000000600082015250565b6000610e48600c83610d10565b9150610e5382610e12565b602082019050919050565b60006020820190508181036000830152610e7781610e3b565b9050919050565b600081905092915050565b50565b6000610e99600083610e7e565b9150610ea482610e89565b600082019050919050565b6000610eba82610e8c565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610efa600c83610d10565b9150610f0582610ec4565b602082019050919050565b60006020820190508181036000830152610f2981610eed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f6a82610b4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9d57610f9c610d8d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610fe282610b4f565b9150610fed83610b4f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561102657611025610d8d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061106b82610b4f565b915061107683610b4f565b92508261108657611085611031565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110b081611091565b81146110bb57600080fd5b50565b6000815190506110cd816110a7565b92915050565b6000819050919050565b6110e6816110d3565b81146110f157600080fd5b50565b600081519050611103816110dd565b92915050565b60008151905061111881610cb7565b92915050565b600080600080600060a0868803121561113a57611139610b83565b5b6000611148888289016110be565b9550506020611159888289016110f4565b945050604061116a88828901611109565b935050606061117b88828901611109565b925050608061118c888289016110be565b9150509295509295909350565b60006111a4826110d3565b91506111af836110d3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111ee576111ed610d8d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561122b5761122a610d8d565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561126857611267610d8d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112a5576112a4610d8d565b5b82820290509291505056fea2646970667358221220c3913d7606c93f6dcdd26de2c5a9cd4753ed6ae153907c7e68f46a62bf4adeea64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063be2693f014610175578063d7b4750c1461017f578063f9a20fe3146101bc57610099565b8063213dbea2146100a35780633ccfd60b146100ce57806348a25b49146100d8578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100b8610333565b6040516100c59190610b68565b60405180910390f35b6100d6610340565b005b3480156100e457600080fd5b506100ff60048036038101906100fa9190610be6565b610644565b60405161010c9190610b68565b60405180910390f35b34801561012157600080fd5b5061012a61065c565b6040516101379190610c22565b60405180910390f35b34801561014c57600080fd5b50610155610684565b6040516101629190610c9c565b60405180910390f35b6101736101f9565b005b61017d6106ae565b005b34801561018b57600080fd5b506101a660048036038101906101a19190610ce3565b61093c565b6040516101b39190610c22565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610be6565b610984565b6040516101f09190610b68565b60405180910390f35b6802b5e3af16b1880000610238600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109cc90919063ffffffff16565b1015610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610d6d565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c79190610dbc565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561040b573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610e5e565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff16476040516104ac90610eaf565b60006040518083038185875af1925050503d80600081146104e9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ee565b606091505b509150915081610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610f10565b60405180910390fd5b60005b6001805490508110156105de5760006001828154811061055957610558610f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105d690610f5f565b915050610536565b50600067ffffffffffffffff8111156105fa576105f9610fa8565b5b6040519080825280602002602001820160405280156106285781602001602082028036833780820191505090505b506001908051906020019061063e929190610aa8565b50505050565b60006020528060005260406000206000915090505481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610733576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076d575b5050505050905060005b81518110156108415760008282815181106107df576107de610f30565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083990610f5f565b9150506107c1565b50600067ffffffffffffffff81111561085d5761085c610fa8565b5b60405190808252806020026020018201604052801561088b5781602001602082028036833780820191505090505b50600190805190602001906108a1929190610aa8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e890610eaf565b60006040518083038185875af1925050503d8060008114610925576040519150601f19603f3d011682016040523d82523d6000602084013e61092a565b606091505b505090508061093857600080fd5b5050565b60006001828154811061095257610951610f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806109d883610a08565b90506000670de0b6b3a764000085836109f19190610fd7565b6109fb9190611060565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a89919061111e565b5050509150506402540be40081610aa09190611199565b915050919050565b828054828255906000526020600020908101928215610b21579160200282015b82811115610b205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac8565b5b509050610b2e9190610b32565b5090565b5b80821115610b4b576000816000905550600101610b33565b5090565b6000819050919050565b610b6281610b4f565b82525050565b6000602082019050610b7d6000830184610b59565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb382610b88565b9050919050565b610bc381610ba8565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610b83565b5b6000610c0a84828501610bd1565b91505092915050565b610c1c81610ba8565b82525050565b6000602082019050610c376000830184610c13565b92915050565b6000819050919050565b6000610c62610c5d610c5884610b88565b610c3d565b610b88565b9050919050565b6000610c7482610c47565b9050919050565b6000610c8682610c69565b9050919050565b610c9681610c7b565b82525050565b6000602082019050610cb16000830184610c8d565b92915050565b610cc081610b4f565b8114610ccb57600080fd5b50565b600081359050610cdd81610cb7565b92915050565b600060208284031215610cf957610cf8610b83565b5b6000610d0784828501610cce565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f2066756e64206d6f72652045544821000000000000600082015250565b6000610d57601a83610d10565b9150610d6282610d21565b602082019050919050565b60006020820190508181036000830152610d8681610d4a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc782610b4f565b9150610dd283610b4f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0757610e06610d8d565b5b828201905092915050565b7f53656e64206661696c6564210000000000000000000000000000000000000000600082015250565b6000610e48600c83610d10565b9150610e5382610e12565b602082019050919050565b60006020820190508181036000830152610e7781610e3b565b9050919050565b600081905092915050565b50565b6000610e99600083610e7e565b9150610ea482610e89565b600082019050919050565b6000610eba82610e8c565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610efa600c83610d10565b9150610f0582610ec4565b602082019050919050565b60006020820190508181036000830152610f2981610eed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f6a82610b4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9d57610f9c610d8d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610fe282610b4f565b9150610fed83610b4f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561102657611025610d8d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061106b82610b4f565b915061107683610b4f565b92508261108657611085611031565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110b081611091565b81146110bb57600080fd5b50565b6000815190506110cd816110a7565b92915050565b6000819050919050565b6110e6816110d3565b81146110f157600080fd5b50565b600081519050611103816110dd565b92915050565b60008151905061111881610cb7565b92915050565b600080600080600060a0868803121561113a57611139610b83565b5b6000611148888289016110be565b9550506020611159888289016110f4565b945050604061116a88828901611109565b935050606061117b88828901611109565b925050608061118c888289016110be565b9150509295509295909350565b60006111a4826110d3565b91506111af836110d3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111ee576111ed610d8d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561122b5761122a610d8d565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561126857611267610d8d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112a5576112a4610d8d565b5b82820290509291505056fea2646970667358221220c3913d7606c93f6dcdd26de2c5a9cd4753ed6ae153907c7e68f46a62bf4adeea64736f6c63430008080033",
  "devdoc": {
    "author": "alwayscommit",
    "details": "Implements price feeds for our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds this contract"
      }
    },
    "notice": "Sample crowd funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressAmountMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}