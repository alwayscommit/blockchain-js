{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressAmountMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb14a98e988c271da77809111ce50884adc442e38b6c7da1af15301942e304a1b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "865410",
    "logsBloom": "0x
    "blockHash": "0x31a1e1a53f44ae74b26bb6e550fa3dac259bae7e0add8b9920eb42f95212d3f1",
    "transactionHash": "0xb14a98e988c271da77809111ce50884adc442e38b6c7da1af15301942e304a1b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "865410",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "17d9cac4b6937c9639a26bb2ca7d5d74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"alwayscommit\",\"details\":\"Implements price feeds for our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds this contract\"}},\"notice\":\"Sample crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.0;\\n\\n//imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//hardhat has console.log()\\n// import \\\"hardhat/console.sol\\\";\\n\\n//Error Codes, best practice to include contract name to not be confused between different error codes\\nerror FundMe__NotOwner();\\n\\n//Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd funding\\n *  @author alwayscommit\\n *  @notice Sample crowd funding contract\\n *  @dev Implements price feeds for our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant MIN_USD = 50 * 10**18;\\n\\n    //s_storageVariables\\n    mapping(address => uint256) public s_addressAmountMap;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //contructor\\n    //receive\\n    //fallback\\n    //external\\n    //public\\n    //internal\\n    //private\\n    //view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice Funds this contract\\n     */\\n    function fund() public payable {\\n        // require(\\n        //     msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\\n        //     \\\"You need to fund more ETH!\\\"\\n        // );\\n        s_addressAmountMap[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n        bool isSuccess = payable(msg.sender).send(address(this).balance);\\n        require(isSuccess, \\\"Send failed!\\\");\\n        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed!\\\");\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressAmountMap[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressAmountMap[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    //we do not want outside world to know variables like s_funders, etc because it doesn't make sense to them\\n    //s_ is important for us, not them, thus we make them private and expose these public methods for the same\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressAmount(address funder) public view returns (uint256) {\\n        return s_addressAmountMap[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x920a06d6a82be35b059d5ec2b8629f9b3e6e5170fbca94713a94bee6fc1cdae4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x3233cea6413f3c7ca336811456b3cfd88f6dea7f8e5a8685c00922b6dee8fe38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610fb8380380610fb883398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e45610173600039600081816102c2015281816105e00152818161063001526108260152610e456000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063be2693f014610175578063d7b4750c1461017f578063f9a20fe3146101bc57610099565b8063213dbea2146100a35780633ccfd60b146100ce57806348a25b49146100d8578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100b86102b3565b6040516100c59190610a0c565b60405180910390f35b6100d66102c0565b005b3480156100e457600080fd5b506100ff60048036038101906100fa9190610a8a565b6105c4565b60405161010c9190610a0c565b60405180910390f35b34801561012157600080fd5b5061012a6105dc565b6040516101379190610ac6565b60405180910390f35b34801561014c57600080fd5b50610155610604565b6040516101629190610b40565b60405180910390f35b6101736101f9565b005b61017d61062e565b005b34801561018b57600080fd5b506101a660048036038101906101a19190610b87565b6108bc565b6040516101b39190610ac6565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610a8a565b610904565b6040516101f09190610a0c565b60405180910390f35b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102479190610be3565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610345576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561038b573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90610c96565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff164760405161042c90610ce7565b60006040518083038185875af1925050503d8060008114610469576040519150601f19603f3d011682016040523d82523d6000602084013e61046e565b606091505b5091509150816104b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104aa90610d48565b60405180910390fd5b60005b60018054905081101561055e576000600182815481106104d9576104d8610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055690610d97565b9150506104b6565b50600067ffffffffffffffff81111561057a57610579610de0565b5b6040519080825280602002602001820160405280156105a85781602001602082028036833780820191505090505b50600190805190602001906105be92919061094c565b50505050565b60006020528060005260406000206000915090505481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ed575b5050505050905060005b81518110156107c157600082828151811061075f5761075e610d68565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b990610d97565b915050610741565b50600067ffffffffffffffff8111156107dd576107dc610de0565b5b60405190808252806020026020018201604052801561080b5781602001602082028036833780820191505090505b506001908051906020019061082192919061094c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086890610ce7565b60006040518083038185875af1925050503d80600081146108a5576040519150601f19603f3d011682016040523d82523d6000602084013e6108aa565b606091505b50509050806108b857600080fd5b5050565b6000600182815481106108d2576108d1610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8280548282559060005260206000209081019282156109c5579160200282015b828111156109c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096c565b5b5090506109d291906109d6565b5090565b5b808211156109ef5760008160009055506001016109d7565b5090565b6000819050919050565b610a06816109f3565b82525050565b6000602082019050610a2160008301846109fd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5782610a2c565b9050919050565b610a6781610a4c565b8114610a7257600080fd5b50565b600081359050610a8481610a5e565b92915050565b600060208284031215610aa057610a9f610a27565b5b6000610aae84828501610a75565b91505092915050565b610ac081610a4c565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b6000819050919050565b6000610b06610b01610afc84610a2c565b610ae1565b610a2c565b9050919050565b6000610b1882610aeb565b9050919050565b6000610b2a82610b0d565b9050919050565b610b3a81610b1f565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b64816109f3565b8114610b6f57600080fd5b50565b600081359050610b8181610b5b565b92915050565b600060208284031215610b9d57610b9c610a27565b5b6000610bab84828501610b72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bee826109f3565b9150610bf9836109f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c2e57610c2d610bb4565b5b828201905092915050565b600082825260208201905092915050565b7f53656e64206661696c6564210000000000000000000000000000000000000000600082015250565b6000610c80600c83610c39565b9150610c8b82610c4a565b602082019050919050565b60006020820190508181036000830152610caf81610c73565b9050919050565b600081905092915050565b50565b6000610cd1600083610cb6565b9150610cdc82610cc1565b600082019050919050565b6000610cf282610cc4565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610d32600c83610c39565b9150610d3d82610cfc565b602082019050919050565b60006020820190508181036000830152610d6181610d25565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610da2826109f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd557610dd4610bb4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220b8453e87e79d4a4d0b8009daf09d17e9343441e2d18abe45965a0df19aa5bb3364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063be2693f014610175578063d7b4750c1461017f578063f9a20fe3146101bc57610099565b8063213dbea2146100a35780633ccfd60b146100ce57806348a25b49146100d8578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100b86102b3565b6040516100c59190610a0c565b60405180910390f35b6100d66102c0565b005b3480156100e457600080fd5b506100ff60048036038101906100fa9190610a8a565b6105c4565b60405161010c9190610a0c565b60405180910390f35b34801561012157600080fd5b5061012a6105dc565b6040516101379190610ac6565b60405180910390f35b34801561014c57600080fd5b50610155610604565b6040516101629190610b40565b60405180910390f35b6101736101f9565b005b61017d61062e565b005b34801561018b57600080fd5b506101a660048036038101906101a19190610b87565b6108bc565b6040516101b39190610ac6565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610a8a565b610904565b6040516101f09190610a0c565b60405180910390f35b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102479190610be3565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610345576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561038b573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90610c96565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff164760405161042c90610ce7565b60006040518083038185875af1925050503d8060008114610469576040519150601f19603f3d011682016040523d82523d6000602084013e61046e565b606091505b5091509150816104b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104aa90610d48565b60405180910390fd5b60005b60018054905081101561055e576000600182815481106104d9576104d8610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055690610d97565b9150506104b6565b50600067ffffffffffffffff81111561057a57610579610de0565b5b6040519080825280602002602001820160405280156105a85781602001602082028036833780820191505090505b50600190805190602001906105be92919061094c565b50505050565b60006020528060005260406000206000915090505481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ed575b5050505050905060005b81518110156107c157600082828151811061075f5761075e610d68565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b990610d97565b915050610741565b50600067ffffffffffffffff8111156107dd576107dc610de0565b5b60405190808252806020026020018201604052801561080b5781602001602082028036833780820191505090505b506001908051906020019061082192919061094c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086890610ce7565b60006040518083038185875af1925050503d80600081146108a5576040519150601f19603f3d011682016040523d82523d6000602084013e6108aa565b606091505b50509050806108b857600080fd5b5050565b6000600182815481106108d2576108d1610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8280548282559060005260206000209081019282156109c5579160200282015b828111156109c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096c565b5b5090506109d291906109d6565b5090565b5b808211156109ef5760008160009055506001016109d7565b5090565b6000819050919050565b610a06816109f3565b82525050565b6000602082019050610a2160008301846109fd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5782610a2c565b9050919050565b610a6781610a4c565b8114610a7257600080fd5b50565b600081359050610a8481610a5e565b92915050565b600060208284031215610aa057610a9f610a27565b5b6000610aae84828501610a75565b91505092915050565b610ac081610a4c565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b6000819050919050565b6000610b06610b01610afc84610a2c565b610ae1565b610a2c565b9050919050565b6000610b1882610aeb565b9050919050565b6000610b2a82610b0d565b9050919050565b610b3a81610b1f565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b64816109f3565b8114610b6f57600080fd5b50565b600081359050610b8181610b5b565b92915050565b600060208284031215610b9d57610b9c610a27565b5b6000610bab84828501610b72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bee826109f3565b9150610bf9836109f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c2e57610c2d610bb4565b5b828201905092915050565b600082825260208201905092915050565b7f53656e64206661696c6564210000000000000000000000000000000000000000600082015250565b6000610c80600c83610c39565b9150610c8b82610c4a565b602082019050919050565b60006020820190508181036000830152610caf81610c73565b9050919050565b600081905092915050565b50565b6000610cd1600083610cb6565b9150610cdc82610cc1565b600082019050919050565b6000610cf282610cc4565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610d32600c83610c39565b9150610d3d82610cfc565b602082019050919050565b60006020820190508181036000830152610d6181610d25565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610da2826109f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd557610dd4610bb4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220b8453e87e79d4a4d0b8009daf09d17e9343441e2d18abe45965a0df19aa5bb3364736f6c63430008080033",
  "devdoc": {
    "author": "alwayscommit",
    "details": "Implements price feeds for our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds this contract"
      }
    },
    "notice": "Sample crowd funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressAmountMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}