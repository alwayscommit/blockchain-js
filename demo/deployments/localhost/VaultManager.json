{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract EquityToken",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerVault",
          "type": "address"
        }
      ],
      "name": "drawDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerVault",
          "type": "address"
        }
      ],
      "name": "getBorrowerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDaiBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerVault",
          "type": "address"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerVault",
          "type": "address"
        }
      ],
      "name": "getValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultTokenMapping",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bbd36b24d791c4e761b46a860cc32dbe020994bc40795fbbfa98849565d0f17",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3083152",
    "logsBloom": "0x
    "blockHash": "0xb929ebd031748fe1810ad41c7e5e37f3e80dbd3eb6b7ce65766470f1a15fa927",
    "transactionHash": "0x5bbd36b24d791c4e761b46a860cc32dbe020994bc40795fbbfa98849565d0f17",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3083152",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "475955bee849799aa04a53bd1ca59f0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract EquityToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerVault\",\"type\":\"address\"}],\"name\":\"drawDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerVault\",\"type\":\"address\"}],\"name\":\"getBorrowerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerVault\",\"type\":\"address\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerVault\",\"type\":\"address\"}],\"name\":\"getValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultTokenMapping\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultManager.sol\":\"VaultManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dai.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract Dai is ERC20 {\\n    address private constant makerDAOAddress = address(0xdD870fA1b7C4700F2BD7f44238821C26f7392148);\\n\\n    constructor(\\n        uint256 amount,\\n        address approveVaultAddress,\\n        address borrowerAddress\\n    ) ERC20(\\\"DAI Token\\\", \\\"DAI\\\") {\\n        _mint(makerDAOAddress, amount);\\n        _approve(makerDAOAddress, approveVaultAddress, amount);\\n        _approve(borrowerAddress, approveVaultAddress, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf5f177b3f67cb080a9492fba827182d5c70c6f5afbf4fc34dec7632e9788370d\",\"license\":\"MIT\"},\"contracts/EquityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror EquityToken__NotOwner();\\n\\ncontract EquityToken is ERC20 {\\n    //owner = centralized entity\\n    address private immutable i_owner;\\n    //unique id of the person who wants to borrow DAI through this centralized entity\\n    // uint256 private immutable i_borrowerUUID;\\n    address payable private s_borrowerAddress;\\n    mapping(string => uint256) s_stockPortfolio;\\n    AggregatorV3Interface private s_applePriceFeed;\\n    AggregatorV3Interface private s_googlePriceFeed;\\n    AggregatorV3Interface private s_microsoftPriceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert EquityToken__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        // uint256 borrowerUUID,\\n        address payable borrowerAddress,\\n        uint256 appleStocks,\\n        uint256 microsoftStocks,\\n        uint256 googleStocks,\\n        address applePriceFeed,\\n        address googlePriceFeed,\\n        address microsoftPriceFeed,\\n        address owner\\n    ) ERC20(\\\"EquityToken\\\", \\\"EQT\\\") {\\n        i_owner = owner;\\n        s_stockPortfolio[\\\"APPLE\\\"] = appleStocks;\\n        s_stockPortfolio[\\\"MICROSOFT\\\"] = microsoftStocks;\\n        s_stockPortfolio[\\\"GOOGLE\\\"] = googleStocks;\\n        s_borrowerAddress = borrowerAddress;\\n        s_applePriceFeed = AggregatorV3Interface(applePriceFeed);\\n        s_googlePriceFeed = AggregatorV3Interface(googlePriceFeed);\\n        s_microsoftPriceFeed = AggregatorV3Interface(microsoftPriceFeed);\\n        _mint(s_borrowerAddress, 1);\\n    }\\n\\n    function getApplePrice() public view returns (uint256) {\\n        (, int256 answer, , , ) = s_applePriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getGooglePrice() public view returns (uint256) {\\n        (, int256 answer, , , ) = s_googlePriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getMicrosoftPrice() public view returns (uint256) {\\n        (, int256 answer, , , ) = s_microsoftPriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    // function getBorrowerUUID() public view returns (uint256) {\\n    // return i_borrowerUUID;\\n    // }\\n\\n    function getBorrowerAddress() public view returns (address) {\\n        return s_borrowerAddress;\\n    }\\n\\n    function getValuation() public view returns (uint256) {\\n        return\\n            (getApplePrice() * s_stockPortfolio[\\\"APPLE\\\"]) +\\n            (getGooglePrice() * s_stockPortfolio[\\\"GOOGLE\\\"]) +\\n            (getMicrosoftPrice() * s_stockPortfolio[\\\"MICROSOFT\\\"]);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getEquityCount(string calldata equityName) public view returns (uint256) {\\n        return s_stockPortfolio[equityName];\\n    }\\n}\\n\",\"keccak256\":\"0x573f397553c631ecba6404f3b5a51b9126e533586fdb5159a2cd31e175a21f5f\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"./EquityToken.sol\\\";\\nimport \\\"./Dai.sol\\\";\\n\\ncontract Vault {\\n    //makerdao\\n    address private s_owner;\\n    ERC20 private s_token;\\n    uint256 private s_collateralValue;\\n    address payable private immutable i_borrowerAddress;\\n    address payable private constant makerDAOAddress =\\n        payable(0xdD870fA1b7C4700F2BD7f44238821C26f7392148);\\n    Dai private dai;\\n\\n    // uint256 private debtValue;\\n    // uint256 private liquidationValue;\\n\\n    constructor(\\n        address token,\\n        uint256 valuation,\\n        address payable borrowerAddress\\n    ) {\\n        s_token = ERC20(token);\\n        s_token.approve(makerDAOAddress, 1);\\n        //makerdao address\\n        s_owner = makerDAOAddress;\\n        s_collateralValue = valuation;\\n        i_borrowerAddress = borrowerAddress;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return s_owner;\\n    }\\n\\n    function getValuation() public view returns (uint256) {\\n        return s_collateralValue;\\n    }\\n\\n    function getBorrowerAddress() public view returns (address) {\\n        return i_borrowerAddress;\\n    }\\n\\n    function drawDai() public payable {\\n        s_token.transferFrom(i_borrowerAddress, makerDAOAddress, 1);\\n        dai = new Dai(s_collateralValue / 2, address(this), i_borrowerAddress);\\n        dai.transferFrom(makerDAOAddress, i_borrowerAddress, s_collateralValue / 2);\\n    }\\n\\n    function depositDai(uint256 amount) public payable {\\n        dai.transferFrom(i_borrowerAddress, makerDAOAddress, amount);\\n        s_token.transferFrom(makerDAOAddress, i_borrowerAddress, 1);\\n    }\\n\\n    function getDaiBalance(address account) public view returns (uint256) {\\n        return dai.balanceOf(account);\\n    }\\n}\\n\",\"keccak256\":\"0xbc7e42f130cf47c4ffd375350f4c6c32197f803ef0e02400466bbd042b6ebb4b\",\"license\":\"MIT\"},\"contracts/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"./EquityToken.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\n//get number of apple, microsoft, google stocks\\n\\ncontract VaultManager {\\n    mapping(address => Vault) public vaultTokenMapping;\\n\\n    function createVault(EquityToken token) public {\\n        Vault vault = new Vault(\\n            address(token),\\n            token.getValuation(),\\n            payable(token.getBorrowerAddress())\\n        );\\n        vaultTokenMapping[token.getBorrowerAddress()] = vault;\\n    }\\n\\n    function getValuation(address borrowerVault) public view returns (uint256) {\\n        return vaultTokenMapping[borrowerVault].getValuation();\\n    }\\n\\n    function getOwner(address borrowerVault) public view returns (address) {\\n        return vaultTokenMapping[borrowerVault].getOwner();\\n    }\\n\\n    function getBorrowerAddress(address borrowerVault) public view returns (address) {\\n        return vaultTokenMapping[borrowerVault].getBorrowerAddress();\\n    }\\n\\n    function drawDai(address borrowerVault) public {\\n        vaultTokenMapping[borrowerVault].drawDai();\\n    }\\n\\n    function getDaiBalance(address borrowerVault, address account) public view returns (uint256) {\\n        return vaultTokenMapping[borrowerVault].getDaiBalance(account);\\n    }\\n}\\n\",\"keccak256\":\"0xde69dacd079f27b85e3e5334025767a38f6f9438cd6d7f3cf65e580448ac5182\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613722806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c80634c865d7111620000635780634c865d711462000119578063b4bd6f46146200014f578063f8453c33146200016f578063fa54416114620001a55762000088565b80630aace652146200008d5780630d1f4ce414620000c35780631675e45814620000e3575b600080fd5b620000ab6004803603810190620000a5919062000932565b620001db565b604051620000ba919062000afc565b60405180910390f35b620000e16004803603810190620000db919062000932565b620002c4565b005b620001016004803603810190620000fb919062000996565b62000387565b60405162000110919062000afc565b60405180910390f35b62000137600480360381019062000131919062000932565b6200047e565b60405162000146919062000adf565b60405180910390f35b6200016d6004803603810190620001679190620009dd565b620004b1565b005b6200018d600480360381019062000187919062000932565b620006f6565b6040516200019c919062000a85565b60405180910390f35b620001c36004803603810190620001bd919062000932565b620007df565b604051620001d2919062000a85565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efe4227a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200028257600080fd5b505afa15801562000297573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bd919062000a0f565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccaca7b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200036b57600080fd5b505af115801562000380573d6000803e3d6000fd5b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4287be836040518263ffffffff1660e01b815260040162000422919062000a85565b60206040518083038186803b1580156200043b57600080fd5b505afa15801562000450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000476919062000a0f565b905092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818273ffffffffffffffffffffffffffffffffffffffff1663efe4227a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004fb57600080fd5b505afa15801562000510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000536919062000a0f565b8373ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200057d57600080fd5b505afa15801562000592573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b8919062000964565b604051620005c690620008c8565b620005d49392919062000aa2565b604051809103906000f080158015620005f1573d6000803e3d6000fd5b509050806000808473ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200063f57600080fd5b505afa15801562000654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067a919062000964565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079d57600080fd5b505afa158015620007b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d8919062000964565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156200088657600080fd5b505afa1580156200089b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c1919062000964565b9050919050565b612ade8062000c0f83390190565b600081359050620008e78162000bc0565b92915050565b600081519050620008fe8162000bc0565b92915050565b600081359050620009158162000bda565b92915050565b6000815190506200092c8162000bf4565b92915050565b6000602082840312156200094b576200094a62000bbb565b5b60006200095b84828501620008d6565b91505092915050565b6000602082840312156200097d576200097c62000bbb565b5b60006200098d84828501620008ed565b91505092915050565b60008060408385031215620009b057620009af62000bbb565b5b6000620009c085828601620008d6565b9250506020620009d385828601620008d6565b9150509250929050565b600060208284031215620009f657620009f562000bbb565b5b600062000a068482850162000904565b91505092915050565b60006020828403121562000a285762000a2762000bbb565b5b600062000a38848285016200091b565b91505092915050565b62000a4c8162000b2d565b82525050565b62000a5d8162000b19565b82525050565b62000a6e8162000b7f565b82525050565b62000a7f8162000b75565b82525050565b600060208201905062000a9c600083018462000a52565b92915050565b600060608201905062000ab9600083018662000a52565b62000ac8602083018562000a74565b62000ad7604083018462000a41565b949350505050565b600060208201905062000af6600083018462000a63565b92915050565b600060208201905062000b13600083018462000a74565b92915050565b600062000b268262000b55565b9050919050565b600062000b3a8262000b55565b9050919050565b600062000b4e8262000b19565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000b8c8262000b93565b9050919050565b600062000ba08262000ba7565b9050919050565b600062000bb48262000b55565b9050919050565b600080fd5b62000bcb8162000b19565b811462000bd757600080fd5b50565b62000be58162000b41565b811462000bf157600080fd5b50565b62000bff8162000b75565b811462000c0b57600080fd5b5056fe60a06040523480156200001157600080fd5b5060405162002ade38038062002ade83398181016040528101906200003791906200023a565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b373dd870fa1b7c4700f2bd7f44238821c26f739214860016040518363ffffffff1660e01b8152600401620000ec929190620002ea565b602060405180830381600087803b1580156200010757600080fd5b505af11580156200011c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000142919062000296565b5073dd870fa1b7c4700f2bd7f44238821c26f73921486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000432565b600081519050620001ef81620003ca565b92915050565b6000815190506200020681620003e4565b92915050565b6000815190506200021d81620003fe565b92915050565b600081519050620002348162000418565b92915050565b600080600060608486031215620002565762000255620003c5565b5b60006200026686828701620001de565b9350506020620002798682870162000223565b92505060406200028c86828701620001f5565b9150509250925092565b600060208284031215620002af57620002ae620003c5565b5b6000620002bf848285016200020c565b91505092915050565b620002d38162000375565b82525050565b620002e48162000389565b82525050565b6000604082019050620003016000830185620002c8565b620003106020830184620002d9565b9392505050565b600062000324826200034b565b9050919050565b600062000338826200034b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000382826200039d565b9050919050565b600062000396826200036b565b9050919050565b6000620003aa82620003b1565b9050919050565b6000620003be826200034b565b9050919050565b600080fd5b620003d58162000317565b8114620003e157600080fd5b50565b620003ef816200032b565b8114620003fb57600080fd5b50565b62000409816200033f565b81146200041557600080fd5b50565b62000423816200036b565b81146200042f57600080fd5b50565b60805160601c61266a62000474600039600081816101a1015281816102a20152818161037d0152818161043d0152818161052b01526106ba015261266a6000f3fe6080604052600436106200005c5760003560e01c806335842f7414620000615780633ccaca7b14620000815780637e4287be146200008d578063893d20e814620000d1578063c291ea441462000101578063efe4227a1462000131575b600080fd5b6200007f6004803603810190620000799190620007b6565b62000161565b005b6200008b6200033d565b005b3480156200009a57600080fd5b50620000b96004803603810190620000b3919062000752565b620005d3565b604051620000c89190620008f5565b60405180910390f35b348015620000de57600080fd5b50620000e96200068d565b604051620000f891906200085e565b60405180910390f35b3480156200010e57600080fd5b5062000119620006b6565b6040516200012891906200085e565b60405180910390f35b3480156200013e57600080fd5b5062000149620006de565b604051620001589190620008f5565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000073dd870fa1b7c4700f2bd7f44238821c26f7392148846040518463ffffffff1660e01b8152600401620001f693929190620008b8565b602060405180830381600087803b1580156200021157600080fd5b505af115801562000226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024c919062000784565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd73dd870fa1b7c4700f2bd7f44238821c26f73921487f000000000000000000000000000000000000000000000000000000000000000060016040518463ffffffff1660e01b8152600401620002e3939291906200087b565b602060405180830381600087803b158015620002fe57600080fd5b505af115801562000313573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000339919062000784565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000073dd870fa1b7c4700f2bd7f44238821c26f739214860016040518463ffffffff1660e01b8152600401620003d3939291906200087b565b602060405180830381600087803b158015620003ee57600080fd5b505af115801562000403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000429919062000784565b50600280546200043a91906200094f565b307f00000000000000000000000000000000000000000000000000000000000000006040516200046a90620006e8565b620004789392919062000912565b604051809103906000f08015801562000495573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd73dd870fa1b7c4700f2bd7f44238821c26f73921487f0000000000000000000000000000000000000000000000000000000000000000600280546200055a91906200094f565b6040518463ffffffff1660e01b81526004016200057a93929190620008b8565b602060405180830381600087803b1580156200059557600080fd5b505af1158015620005aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d0919062000784565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016200063291906200085e565b60206040518083038186803b1580156200064b57600080fd5b505afa15801562000660573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006869190620007e8565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b611b918062000aa483390190565b600081359050620007078162000a55565b92915050565b6000815190506200071e8162000a6f565b92915050565b600081359050620007358162000a89565b92915050565b6000815190506200074c8162000a89565b92915050565b6000602082840312156200076b576200076a62000a50565b5b60006200077b84828501620006f6565b91505092915050565b6000602082840312156200079d576200079c62000a50565b5b6000620007ad848285016200070d565b91505092915050565b600060208284031215620007cf57620007ce62000a50565b5b6000620007df8482850162000724565b91505092915050565b60006020828403121562000801576200080062000a50565b5b600062000811848285016200073b565b91505092915050565b6200082581620009d1565b82525050565b620008368162000987565b82525050565b6200084781620009e5565b82525050565b6200085881620009c7565b82525050565b60006020820190506200087560008301846200082b565b92915050565b60006060820190506200089260008301866200081a565b620008a160208301856200081a565b620008b060408301846200083c565b949350505050565b6000606082019050620008cf60008301866200081a565b620008de60208301856200081a565b620008ed60408301846200084d565b949350505050565b60006020820190506200090c60008301846200084d565b92915050565b60006060820190506200092960008301866200084d565b6200093860208301856200082b565b6200094760408301846200081a565b949350505050565b60006200095c82620009c7565b91506200096983620009c7565b9250826200097c576200097b62000a21565b5b828204905092915050565b60006200099482620009a7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620009de82620009f9565b9050919050565b6000620009f282620009c7565b9050919050565b600062000a068262000a0d565b9050919050565b600062000a1a82620009a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b62000a608162000987565b811462000a6c57600080fd5b50565b62000a7a816200099b565b811462000a8657600080fd5b50565b62000a9481620009c7565b811462000aa057600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001b9138038062001b91833981810160405281019062000037919062000574565b6040518060400160405280600981526020017f44414920546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f44414900000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000496565b508060049080519060200190620000d492919062000496565b505050620000fd73dd870fa1b7c4700f2bd7f44238821c26f7392148846200014060201b60201c565b6200012473dd870fa1b7c4700f2bd7f44238821c26f73921488385620002b960201b60201c565b62000137818385620002b960201b60201c565b50505062000919565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001aa906200069a565b60405180910390fd5b620001c7600083836200048c60201b60201c565b8060026000828254620001db9190620006ea565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002329190620006ea565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002999190620006bc565b60405180910390a3620002b5600083836200049160201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156200032c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003239062000678565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200039f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003969062000656565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516200047f9190620006bc565b60405180910390a3505050565b505050565b505050565b828054620004a49062000785565b90600052602060002090601f016020900481019282620004c8576000855562000514565b82601f10620004e357805160ff191683800117855562000514565b8280016001018555821562000514579182015b8281111562000513578251825591602001919060010190620004f6565b5b50905062000523919062000527565b5090565b5b808211156200054257600081600090555060010162000528565b5090565b6000815190506200055781620008e5565b92915050565b6000815190506200056e81620008ff565b92915050565b60008060006060848603121562000590576200058f62000819565b5b6000620005a0868287016200055d565b9350506020620005b38682870162000546565b9250506040620005c68682870162000546565b9150509250925092565b6000620005df602283620006d9565b9150620005ec826200081e565b604082019050919050565b600062000606602483620006d9565b915062000613826200086d565b604082019050919050565b60006200062d601f83620006d9565b91506200063a82620008bc565b602082019050919050565b62000650816200077b565b82525050565b600060208201905081810360008301526200067181620005d0565b9050919050565b600060208201905081810360008301526200069381620005f7565b9050919050565b60006020820190508181036000830152620006b5816200061e565b9050919050565b6000602082019050620006d3600083018462000645565b92915050565b600082825260208201905092915050565b6000620006f7826200077b565b915062000704836200077b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200073c576200073b620007bb565b5b828201905092915050565b600062000754826200075b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200079e57607f821691505b60208210811415620007b557620007b4620007ea565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620008f08162000747565b8114620008fc57600080fd5b50565b6200090a816200077b565b81146200091657600080fd5b50565b61126880620009296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d29565b60405180910390f35b6100e660048036038101906100e19190610b73565b610308565b6040516100f39190610d0e565b60405180910390f35b61010461032b565b6040516101119190610e2b565b60405180910390f35b610134600480360381019061012f9190610b20565b610335565b6040516101419190610d0e565b60405180910390f35b610152610364565b60405161015f9190610e46565b60405180910390f35b610182600480360381019061017d9190610b73565b61036d565b60405161018f9190610d0e565b60405180910390f35b6101b260048036038101906101ad9190610ab3565b6103a4565b6040516101bf9190610e2b565b60405180910390f35b6101d06103ec565b6040516101dd9190610d29565b60405180910390f35b61020060048036038101906101fb9190610b73565b61047e565b60405161020d9190610d0e565b60405180910390f35b610230600480360381019061022b9190610b73565b6104f5565b60405161023d9190610d0e565b60405180910390f35b610260600480360381019061025b9190610ae0565b610518565b60405161026d9190610e2b565b60405180910390f35b60606003805461028590610f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f5b565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610772565b6103588585856107fe565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610e7d565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610f5b565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610f5b565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e0b565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fe565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610deb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610d6b565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107659190610e2b565b60405180910390a3505050565b600061077e8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f857818110156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190610d8b565b60405180910390fd5b6107f784848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590610dcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590610d4b565b60405180910390fd5b6108e9838383610a7f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690610dab565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a029190610e7d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a669190610e2b565b60405180910390a3610a79848484610a84565b50505050565b505050565b505050565b600081359050610a9881611204565b92915050565b600081359050610aad8161121b565b92915050565b600060208284031215610ac957610ac8610feb565b5b6000610ad784828501610a89565b91505092915050565b60008060408385031215610af757610af6610feb565b5b6000610b0585828601610a89565b9250506020610b1685828601610a89565b9150509250929050565b600080600060608486031215610b3957610b38610feb565b5b6000610b4786828701610a89565b9350506020610b5886828701610a89565b9250506040610b6986828701610a9e565b9150509250925092565b60008060408385031215610b8a57610b89610feb565b5b6000610b9885828601610a89565b9250506020610ba985828601610a9e565b9150509250929050565b610bbc81610ee5565b82525050565b6000610bcd82610e61565b610bd78185610e6c565b9350610be7818560208601610f28565b610bf081610ff0565b840191505092915050565b6000610c08602383610e6c565b9150610c1382611001565b604082019050919050565b6000610c2b602283610e6c565b9150610c3682611050565b604082019050919050565b6000610c4e601d83610e6c565b9150610c598261109f565b602082019050919050565b6000610c71602683610e6c565b9150610c7c826110c8565b604082019050919050565b6000610c94602583610e6c565b9150610c9f82611117565b604082019050919050565b6000610cb7602483610e6c565b9150610cc282611166565b604082019050919050565b6000610cda602583610e6c565b9150610ce5826111b5565b604082019050919050565b610cf981610f11565b82525050565b610d0881610f1b565b82525050565b6000602082019050610d236000830184610bb3565b92915050565b60006020820190508181036000830152610d438184610bc2565b905092915050565b60006020820190508181036000830152610d6481610bfb565b9050919050565b60006020820190508181036000830152610d8481610c1e565b9050919050565b60006020820190508181036000830152610da481610c41565b9050919050565b60006020820190508181036000830152610dc481610c64565b9050919050565b60006020820190508181036000830152610de481610c87565b9050919050565b60006020820190508181036000830152610e0481610caa565b9050919050565b60006020820190508181036000830152610e2481610ccd565b9050919050565b6000602082019050610e406000830184610cf0565b92915050565b6000602082019050610e5b6000830184610cff565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e8882610f11565b9150610e9383610f11565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec857610ec7610f8d565b5b828201905092915050565b6000610ede82610ef1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f46578082015181840152602081019050610f2b565b83811115610f55576000848401525b50505050565b60006002820490506001821680610f7357607f821691505b60208210811415610f8757610f86610fbc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61120d81610ed3565b811461121857600080fd5b50565b61122481610f11565b811461122f57600080fd5b5056fea26469706673582212201ed2da22d403e3378efe424030b1a77af9500420f8ba93c547748638dce0832f64736f6c63430008070033a26469706673582212203bc684d96a5aefe4c3a07052c544d4bcb91a0f852f28867b5ce5404ae4c6469064736f6c63430008070033a2646970667358221220553ea2e49aeca2a324e116e6dd8472bbd9878458f44dba62299b178e12d0142964736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c80634c865d7111620000635780634c865d711462000119578063b4bd6f46146200014f578063f8453c33146200016f578063fa54416114620001a55762000088565b80630aace652146200008d5780630d1f4ce414620000c35780631675e45814620000e3575b600080fd5b620000ab6004803603810190620000a5919062000932565b620001db565b604051620000ba919062000afc565b60405180910390f35b620000e16004803603810190620000db919062000932565b620002c4565b005b620001016004803603810190620000fb919062000996565b62000387565b60405162000110919062000afc565b60405180910390f35b62000137600480360381019062000131919062000932565b6200047e565b60405162000146919062000adf565b60405180910390f35b6200016d6004803603810190620001679190620009dd565b620004b1565b005b6200018d600480360381019062000187919062000932565b620006f6565b6040516200019c919062000a85565b60405180910390f35b620001c36004803603810190620001bd919062000932565b620007df565b604051620001d2919062000a85565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efe4227a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200028257600080fd5b505afa15801562000297573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bd919062000a0f565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccaca7b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200036b57600080fd5b505af115801562000380573d6000803e3d6000fd5b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4287be836040518263ffffffff1660e01b815260040162000422919062000a85565b60206040518083038186803b1580156200043b57600080fd5b505afa15801562000450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000476919062000a0f565b905092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818273ffffffffffffffffffffffffffffffffffffffff1663efe4227a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004fb57600080fd5b505afa15801562000510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000536919062000a0f565b8373ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200057d57600080fd5b505afa15801562000592573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b8919062000964565b604051620005c690620008c8565b620005d49392919062000aa2565b604051809103906000f080158015620005f1573d6000803e3d6000fd5b509050806000808473ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200063f57600080fd5b505afa15801562000654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067a919062000964565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c291ea446040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079d57600080fd5b505afa158015620007b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d8919062000964565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156200088657600080fd5b505afa1580156200089b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c1919062000964565b9050919050565b612ade8062000c0f83390190565b600081359050620008e78162000bc0565b92915050565b600081519050620008fe8162000bc0565b92915050565b600081359050620009158162000bda565b92915050565b6000815190506200092c8162000bf4565b92915050565b6000602082840312156200094b576200094a62000bbb565b5b60006200095b84828501620008d6565b91505092915050565b6000602082840312156200097d576200097c62000bbb565b5b60006200098d84828501620008ed565b91505092915050565b60008060408385031215620009b057620009af62000bbb565b5b6000620009c085828601620008d6565b9250506020620009d385828601620008d6565b9150509250929050565b600060208284031215620009f657620009f562000bbb565b5b600062000a068482850162000904565b91505092915050565b60006020828403121562000a285762000a2762000bbb565b5b600062000a38848285016200091b565b91505092915050565b62000a4c8162000b2d565b82525050565b62000a5d8162000b19565b82525050565b62000a6e8162000b7f565b82525050565b62000a7f8162000b75565b82525050565b600060208201905062000a9c600083018462000a52565b92915050565b600060608201905062000ab9600083018662000a52565b62000ac8602083018562000a74565b62000ad7604083018462000a41565b949350505050565b600060208201905062000af6600083018462000a63565b92915050565b600060208201905062000b13600083018462000a74565b92915050565b600062000b268262000b55565b9050919050565b600062000b3a8262000b55565b9050919050565b600062000b4e8262000b19565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000b8c8262000b93565b9050919050565b600062000ba08262000ba7565b9050919050565b600062000bb48262000b55565b9050919050565b600080fd5b62000bcb8162000b19565b811462000bd757600080fd5b50565b62000be58162000b41565b811462000bf157600080fd5b50565b62000bff8162000b75565b811462000c0b57600080fd5b5056fe60a06040523480156200001157600080fd5b5060405162002ade38038062002ade83398181016040528101906200003791906200023a565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b373dd870fa1b7c4700f2bd7f44238821c26f739214860016040518363ffffffff1660e01b8152600401620000ec929190620002ea565b602060405180830381600087803b1580156200010757600080fd5b505af11580156200011c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000142919062000296565b5073dd870fa1b7c4700f2bd7f44238821c26f73921486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000432565b600081519050620001ef81620003ca565b92915050565b6000815190506200020681620003e4565b92915050565b6000815190506200021d81620003fe565b92915050565b600081519050620002348162000418565b92915050565b600080600060608486031215620002565762000255620003c5565b5b60006200026686828701620001de565b9350506020620002798682870162000223565b92505060406200028c86828701620001f5565b9150509250925092565b600060208284031215620002af57620002ae620003c5565b5b6000620002bf848285016200020c565b91505092915050565b620002d38162000375565b82525050565b620002e48162000389565b82525050565b6000604082019050620003016000830185620002c8565b620003106020830184620002d9565b9392505050565b600062000324826200034b565b9050919050565b600062000338826200034b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000382826200039d565b9050919050565b600062000396826200036b565b9050919050565b6000620003aa82620003b1565b9050919050565b6000620003be826200034b565b9050919050565b600080fd5b620003d58162000317565b8114620003e157600080fd5b50565b620003ef816200032b565b8114620003fb57600080fd5b50565b62000409816200033f565b81146200041557600080fd5b50565b62000423816200036b565b81146200042f57600080fd5b50565b60805160601c61266a62000474600039600081816101a1015281816102a20152818161037d0152818161043d0152818161052b01526106ba015261266a6000f3fe6080604052600436106200005c5760003560e01c806335842f7414620000615780633ccaca7b14620000815780637e4287be146200008d578063893d20e814620000d1578063c291ea441462000101578063efe4227a1462000131575b600080fd5b6200007f6004803603810190620000799190620007b6565b62000161565b005b6200008b6200033d565b005b3480156200009a57600080fd5b50620000b96004803603810190620000b3919062000752565b620005d3565b604051620000c89190620008f5565b60405180910390f35b348015620000de57600080fd5b50620000e96200068d565b604051620000f891906200085e565b60405180910390f35b3480156200010e57600080fd5b5062000119620006b6565b6040516200012891906200085e565b60405180910390f35b3480156200013e57600080fd5b5062000149620006de565b604051620001589190620008f5565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000073dd870fa1b7c4700f2bd7f44238821c26f7392148846040518463ffffffff1660e01b8152600401620001f693929190620008b8565b602060405180830381600087803b1580156200021157600080fd5b505af115801562000226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024c919062000784565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd73dd870fa1b7c4700f2bd7f44238821c26f73921487f000000000000000000000000000000000000000000000000000000000000000060016040518463ffffffff1660e01b8152600401620002e3939291906200087b565b602060405180830381600087803b158015620002fe57600080fd5b505af115801562000313573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000339919062000784565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000073dd870fa1b7c4700f2bd7f44238821c26f739214860016040518463ffffffff1660e01b8152600401620003d3939291906200087b565b602060405180830381600087803b158015620003ee57600080fd5b505af115801562000403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000429919062000784565b50600280546200043a91906200094f565b307f00000000000000000000000000000000000000000000000000000000000000006040516200046a90620006e8565b620004789392919062000912565b604051809103906000f08015801562000495573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd73dd870fa1b7c4700f2bd7f44238821c26f73921487f0000000000000000000000000000000000000000000000000000000000000000600280546200055a91906200094f565b6040518463ffffffff1660e01b81526004016200057a93929190620008b8565b602060405180830381600087803b1580156200059557600080fd5b505af1158015620005aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d0919062000784565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016200063291906200085e565b60206040518083038186803b1580156200064b57600080fd5b505afa15801562000660573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006869190620007e8565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b611b918062000aa483390190565b600081359050620007078162000a55565b92915050565b6000815190506200071e8162000a6f565b92915050565b600081359050620007358162000a89565b92915050565b6000815190506200074c8162000a89565b92915050565b6000602082840312156200076b576200076a62000a50565b5b60006200077b84828501620006f6565b91505092915050565b6000602082840312156200079d576200079c62000a50565b5b6000620007ad848285016200070d565b91505092915050565b600060208284031215620007cf57620007ce62000a50565b5b6000620007df8482850162000724565b91505092915050565b60006020828403121562000801576200080062000a50565b5b600062000811848285016200073b565b91505092915050565b6200082581620009d1565b82525050565b620008368162000987565b82525050565b6200084781620009e5565b82525050565b6200085881620009c7565b82525050565b60006020820190506200087560008301846200082b565b92915050565b60006060820190506200089260008301866200081a565b620008a160208301856200081a565b620008b060408301846200083c565b949350505050565b6000606082019050620008cf60008301866200081a565b620008de60208301856200081a565b620008ed60408301846200084d565b949350505050565b60006020820190506200090c60008301846200084d565b92915050565b60006060820190506200092960008301866200084d565b6200093860208301856200082b565b6200094760408301846200081a565b949350505050565b60006200095c82620009c7565b91506200096983620009c7565b9250826200097c576200097b62000a21565b5b828204905092915050565b60006200099482620009a7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620009de82620009f9565b9050919050565b6000620009f282620009c7565b9050919050565b600062000a068262000a0d565b9050919050565b600062000a1a82620009a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b62000a608162000987565b811462000a6c57600080fd5b50565b62000a7a816200099b565b811462000a8657600080fd5b50565b62000a9481620009c7565b811462000aa057600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001b9138038062001b91833981810160405281019062000037919062000574565b6040518060400160405280600981526020017f44414920546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f44414900000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000496565b508060049080519060200190620000d492919062000496565b505050620000fd73dd870fa1b7c4700f2bd7f44238821c26f7392148846200014060201b60201c565b6200012473dd870fa1b7c4700f2bd7f44238821c26f73921488385620002b960201b60201c565b62000137818385620002b960201b60201c565b50505062000919565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001aa906200069a565b60405180910390fd5b620001c7600083836200048c60201b60201c565b8060026000828254620001db9190620006ea565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002329190620006ea565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002999190620006bc565b60405180910390a3620002b5600083836200049160201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156200032c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003239062000678565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200039f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003969062000656565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516200047f9190620006bc565b60405180910390a3505050565b505050565b505050565b828054620004a49062000785565b90600052602060002090601f016020900481019282620004c8576000855562000514565b82601f10620004e357805160ff191683800117855562000514565b8280016001018555821562000514579182015b8281111562000513578251825591602001919060010190620004f6565b5b50905062000523919062000527565b5090565b5b808211156200054257600081600090555060010162000528565b5090565b6000815190506200055781620008e5565b92915050565b6000815190506200056e81620008ff565b92915050565b60008060006060848603121562000590576200058f62000819565b5b6000620005a0868287016200055d565b9350506020620005b38682870162000546565b9250506040620005c68682870162000546565b9150509250925092565b6000620005df602283620006d9565b9150620005ec826200081e565b604082019050919050565b600062000606602483620006d9565b915062000613826200086d565b604082019050919050565b60006200062d601f83620006d9565b91506200063a82620008bc565b602082019050919050565b62000650816200077b565b82525050565b600060208201905081810360008301526200067181620005d0565b9050919050565b600060208201905081810360008301526200069381620005f7565b9050919050565b60006020820190508181036000830152620006b5816200061e565b9050919050565b6000602082019050620006d3600083018462000645565b92915050565b600082825260208201905092915050565b6000620006f7826200077b565b915062000704836200077b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200073c576200073b620007bb565b5b828201905092915050565b600062000754826200075b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200079e57607f821691505b60208210811415620007b557620007b4620007ea565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620008f08162000747565b8114620008fc57600080fd5b50565b6200090a816200077b565b81146200091657600080fd5b50565b61126880620009296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d29565b60405180910390f35b6100e660048036038101906100e19190610b73565b610308565b6040516100f39190610d0e565b60405180910390f35b61010461032b565b6040516101119190610e2b565b60405180910390f35b610134600480360381019061012f9190610b20565b610335565b6040516101419190610d0e565b60405180910390f35b610152610364565b60405161015f9190610e46565b60405180910390f35b610182600480360381019061017d9190610b73565b61036d565b60405161018f9190610d0e565b60405180910390f35b6101b260048036038101906101ad9190610ab3565b6103a4565b6040516101bf9190610e2b565b60405180910390f35b6101d06103ec565b6040516101dd9190610d29565b60405180910390f35b61020060048036038101906101fb9190610b73565b61047e565b60405161020d9190610d0e565b60405180910390f35b610230600480360381019061022b9190610b73565b6104f5565b60405161023d9190610d0e565b60405180910390f35b610260600480360381019061025b9190610ae0565b610518565b60405161026d9190610e2b565b60405180910390f35b60606003805461028590610f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f5b565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610772565b6103588585856107fe565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610e7d565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610f5b565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610f5b565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e0b565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fe565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610deb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610d6b565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107659190610e2b565b60405180910390a3505050565b600061077e8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f857818110156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190610d8b565b60405180910390fd5b6107f784848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590610dcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590610d4b565b60405180910390fd5b6108e9838383610a7f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690610dab565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a029190610e7d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a669190610e2b565b60405180910390a3610a79848484610a84565b50505050565b505050565b505050565b600081359050610a9881611204565b92915050565b600081359050610aad8161121b565b92915050565b600060208284031215610ac957610ac8610feb565b5b6000610ad784828501610a89565b91505092915050565b60008060408385031215610af757610af6610feb565b5b6000610b0585828601610a89565b9250506020610b1685828601610a89565b9150509250929050565b600080600060608486031215610b3957610b38610feb565b5b6000610b4786828701610a89565b9350506020610b5886828701610a89565b9250506040610b6986828701610a9e565b9150509250925092565b60008060408385031215610b8a57610b89610feb565b5b6000610b9885828601610a89565b9250506020610ba985828601610a9e565b9150509250929050565b610bbc81610ee5565b82525050565b6000610bcd82610e61565b610bd78185610e6c565b9350610be7818560208601610f28565b610bf081610ff0565b840191505092915050565b6000610c08602383610e6c565b9150610c1382611001565b604082019050919050565b6000610c2b602283610e6c565b9150610c3682611050565b604082019050919050565b6000610c4e601d83610e6c565b9150610c598261109f565b602082019050919050565b6000610c71602683610e6c565b9150610c7c826110c8565b604082019050919050565b6000610c94602583610e6c565b9150610c9f82611117565b604082019050919050565b6000610cb7602483610e6c565b9150610cc282611166565b604082019050919050565b6000610cda602583610e6c565b9150610ce5826111b5565b604082019050919050565b610cf981610f11565b82525050565b610d0881610f1b565b82525050565b6000602082019050610d236000830184610bb3565b92915050565b60006020820190508181036000830152610d438184610bc2565b905092915050565b60006020820190508181036000830152610d6481610bfb565b9050919050565b60006020820190508181036000830152610d8481610c1e565b9050919050565b60006020820190508181036000830152610da481610c41565b9050919050565b60006020820190508181036000830152610dc481610c64565b9050919050565b60006020820190508181036000830152610de481610c87565b9050919050565b60006020820190508181036000830152610e0481610caa565b9050919050565b60006020820190508181036000830152610e2481610ccd565b9050919050565b6000602082019050610e406000830184610cf0565b92915050565b6000602082019050610e5b6000830184610cff565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e8882610f11565b9150610e9383610f11565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec857610ec7610f8d565b5b828201905092915050565b6000610ede82610ef1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f46578082015181840152602081019050610f2b565b83811115610f55576000848401525b50505050565b60006002820490506001821680610f7357607f821691505b60208210811415610f8757610f86610fbc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61120d81610ed3565b811461121857600080fd5b50565b61122481610f11565b811461122f57600080fd5b5056fea26469706673582212201ed2da22d403e3378efe424030b1a77af9500420f8ba93c547748638dce0832f64736f6c63430008070033a26469706673582212203bc684d96a5aefe4c3a07052c544d4bcb91a0f852f28867b5ce5404ae4c6469064736f6c63430008070033a2646970667358221220553ea2e49aeca2a324e116e6dd8472bbd9878458f44dba62299b178e12d0142964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1390,
        "contract": "contracts/VaultManager.sol:VaultManager",
        "label": "vaultTokenMapping",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(Vault)1381)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)1381": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Vault)1381)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Vault)",
        "numberOfBytes": "32",
        "value": "t_contract(Vault)1381"
      }
    }
  }
}