{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "applePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "googlePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "microsoftPriceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerUUID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "appleStocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "microsoftStocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "googleStocks",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerUUID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "equityName",
          "type": "string"
        }
      ],
      "name": "getEquityCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerUUID",
          "type": "uint256"
        }
      ],
      "name": "getValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "personTokenMapping",
      "outputs": [
        {
          "internalType": "contract EquityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_applePriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_googlePriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_microsoftPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1e2c80a43ae534014350930c52d47d969dcbf21400d0a1436a6dd10969db091",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2413381",
    "logsBloom": "0x
    "blockHash": "0x6ee8c8d074e569a1df8c5af3312413ef384f5e23c2f26164e56a772853620b5b",
    "transactionHash": "0xc1e2c80a43ae534014350930c52d47d969dcbf21400d0a1436a6dd10969db091",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2413381",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c327b5fc8c4d21daf8f10a6691a129e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"applePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"googlePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"microsoftPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerUUID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appleStocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"microsoftStocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"googleStocks\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerUUID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"equityName\",\"type\":\"string\"}],\"name\":\"getEquityCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerUUID\",\"type\":\"uint256\"}],\"name\":\"getValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personTokenMapping\",\"outputs\":[{\"internalType\":\"contract EquityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_applePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_googlePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_microsoftPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EquityTokenManager.sol\":\"EquityTokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EquityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror EquityToken__NotOwner();\\n\\ncontract EquityToken is ERC20 {\\n    //owner = centralized entity\\n    address private immutable i_owner;\\n    //unique id of the person who wants to borrow DAI through this centralized entity\\n    uint256 private immutable i_borrowerUUID;\\n    mapping(string => uint256) s_stockPortfolio;\\n    AggregatorV3Interface private s_applePriceFeed;\\n    AggregatorV3Interface private s_googlePriceFeed;\\n    AggregatorV3Interface private s_microsoftPriceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert EquityToken__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 borrowerUUID,\\n        uint256 appleStocks,\\n        uint256 microsoftStocks,\\n        uint256 googleStocks,\\n        address applePriceFeed,\\n        address googlePriceFeed,\\n        address microsoftPriceFeed\\n    ) ERC20(\\\"EquityToken\\\", \\\"EQT\\\") {\\n        i_owner = msg.sender;\\n        s_stockPortfolio[\\\"APPLE\\\"] = appleStocks;\\n        s_stockPortfolio[\\\"MICROSOFT\\\"] = microsoftStocks;\\n        s_stockPortfolio[\\\"GOOGLE\\\"] = googleStocks;\\n        i_borrowerUUID = borrowerUUID;\\n        s_applePriceFeed = AggregatorV3Interface(applePriceFeed);\\n        s_googlePriceFeed = AggregatorV3Interface(googlePriceFeed);\\n        s_microsoftPriceFeed = AggregatorV3Interface(microsoftPriceFeed);\\n    }\\n\\n    function getApplePrice() internal view returns (uint256) {\\n        (, int256 answer, , , ) = s_applePriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getGooglePrice() internal view returns (uint256) {\\n        (, int256 answer, , , ) = s_googlePriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getMicrosoftPrice() internal view returns (uint256) {\\n        (, int256 answer, , , ) = s_microsoftPriceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getBorrowerUUID() public view returns (uint256) {\\n        return i_borrowerUUID;\\n    }\\n\\n    function getValuation() public view returns (uint256) {\\n        return\\n            (getApplePrice() * s_stockPortfolio[\\\"APPLE\\\"]) +\\n            (getGooglePrice() * s_stockPortfolio[\\\"GOOGLE\\\"]) +\\n            (getMicrosoftPrice() * s_stockPortfolio[\\\"MICROSOFT\\\"]);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getEquityCount(string calldata equityName) public view returns (uint256) {\\n        return s_stockPortfolio[equityName];\\n    }\\n}\\n\",\"keccak256\":\"0xf6b33a83045e9ee507f35550e0682101764d52a288c4e6ecad20599df73cb942\",\"license\":\"MIT\"},\"contracts/EquityTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\nimport \\\"./EquityToken.sol\\\";\\n\\n//get number of apple, microsoft, google stocks\\n\\ncontract EquityTokenManager {\\n    //centralized entity generating erc20 tokens against a unique person id\\n    mapping(uint256 => EquityToken) public personTokenMapping;\\n    address public s_applePriceFeed;\\n    address public s_googlePriceFeed;\\n    address public s_microsoftPriceFeed;\\n\\n    constructor(\\n        address applePriceFeed,\\n        address googlePriceFeed,\\n        address microsoftPriceFeed\\n    ) {\\n        s_applePriceFeed = applePriceFeed;\\n        s_googlePriceFeed = googlePriceFeed;\\n        s_microsoftPriceFeed = microsoftPriceFeed;\\n    }\\n\\n    function createToken(\\n        uint256 _borrowerUUID,\\n        uint256 appleStocks,\\n        uint256 microsoftStocks,\\n        uint256 googleStocks\\n    ) public {\\n        EquityToken equityToken = new EquityToken(\\n            _borrowerUUID,\\n            appleStocks,\\n            microsoftStocks,\\n            googleStocks,\\n            s_applePriceFeed,\\n            s_googlePriceFeed,\\n            s_microsoftPriceFeed\\n        );\\n        personTokenMapping[_borrowerUUID] = equityToken;\\n    }\\n\\n    function getValuation(uint256 _borrowerUUID) public view returns (uint256) {\\n        return personTokenMapping[_borrowerUUID].getValuation();\\n    }\\n\\n    function getEquityCount(uint256 _borrowerUUID, string calldata equityName)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return personTokenMapping[_borrowerUUID].getEquityCount(equityName);\\n    }\\n}\\n\",\"keccak256\":\"0x608077c2a90f319891e703b77675bc0845bbf82146fb3af3a63660f900206b2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063a7c7c6391162000063578063a7c7c6391462000105578063b885899f1462000127578063d1c4208c146200015d578063d6ba762814620001935762000088565b806328621bcd146200008d5780633bd18a3b14620000af5780638d16a25314620000e5575b600080fd5b62000097620001b5565b604051620000a691906200072d565b60405180910390f35b620000cd6004803603810190620000c7919062000587565b620001db565b604051620000dc91906200078d565b60405180910390f35b620001036004803603810190620000fd919062000655565b62000298565b005b6200010f6200039f565b6040516200011e91906200072d565b60405180910390f35b6200014560048036038101906200013f919062000587565b620003c5565b6040516200015491906200074a565b60405180910390f35b6200017b6004803603810190620001759190620005eb565b620003f8565b6040516200018a91906200078d565b60405180910390f35b6200019d620004c6565b604051620001ac91906200072d565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efe4227a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025657600080fd5b505afa1580156200026b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002919190620005b9565b9050919050565b600084848484600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200031590620004ec565b620003279796959493929190620007aa565b604051809103906000f08015801562000344573d6000803e3d6000fd5b5090508060008087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663454c18d684846040518363ffffffff1660e01b81526004016200046992919062000767565b60206040518083038186803b1580156200048257600080fd5b505afa15801562000497573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004bd9190620005b9565b90509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612054806200090683390190565b60008083601f840112620005135762000512620008c6565b5b8235905067ffffffffffffffff811115620005335762000532620008c1565b5b602083019150836001820283011115620005525762000551620008cb565b5b9250929050565b6000813590506200056a81620008eb565b92915050565b6000815190506200058181620008eb565b92915050565b600060208284031215620005a0576200059f620008d5565b5b6000620005b08482850162000559565b91505092915050565b600060208284031215620005d257620005d1620008d5565b5b6000620005e28482850162000570565b91505092915050565b600080600060408486031215620006075762000606620008d5565b5b6000620006178682870162000559565b935050602084013567ffffffffffffffff8111156200063b576200063a620008d0565b5b6200064986828701620004fa565b92509250509250925092565b60008060008060808587031215620006725762000671620008d5565b5b6000620006828782880162000559565b9450506020620006958782880162000559565b9350506040620006a88782880162000559565b9250506060620006bb8782880162000559565b91505092959194509250565b620006d28162000838565b82525050565b620006e38162000876565b82525050565b6000620006f7838562000827565b935062000706838584620008b2565b6200071183620008da565b840190509392505050565b62000727816200086c565b82525050565b6000602082019050620007446000830184620006c7565b92915050565b6000602082019050620007616000830184620006d8565b92915050565b6000602082019050818103600083015262000784818486620006e9565b90509392505050565b6000602082019050620007a460008301846200071c565b92915050565b600060e082019050620007c1600083018a6200071c565b620007d060208301896200071c565b620007df60408301886200071c565b620007ee60608301876200071c565b620007fd6080830186620006c7565b6200080c60a0830185620006c7565b6200081b60c0830184620006c7565b98975050505050505050565b600082825260208201905092915050565b600062000845826200084c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000883826200088a565b9050919050565b600062000897826200089e565b9050919050565b6000620008ab826200084c565b9050919050565b82818337600083830152505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620008f6816200086c565b81146200090257600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620020543803806200205483398181016040528101906200003791906200032d565b6040518060400160405280600b81526020017f457175697479546f6b656e0000000000000000000000000000000000000000008152506040518060400160405280600381526020017f45515400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb9291906200024f565b508060049080519060200190620000d49291906200024f565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508560056040516200011f9062000483565b90815260200160405180910390208190555084600560405162000142906200046c565b908152602001604051809103902081905550836005604051620001659062000455565b9081526020016040518091039020819055508660a0818152505082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050620005fc565b8280546200025d90620004e3565b90600052602060002090601f016020900481019282620002815760008555620002cd565b82601f106200029c57805160ff1916838001178555620002cd565b82800160010185558215620002cd579182015b82811115620002cc578251825591602001919060010190620002af565b5b509050620002dc9190620002e0565b5090565b5b80821115620002fb576000816000905550600101620002e1565b5090565b6000815190506200031081620005c8565b92915050565b6000815190506200032781620005e2565b92915050565b600080600080600080600060e0888a0312156200034f576200034e62000548565b5b60006200035f8a828b0162000316565b9750506020620003728a828b0162000316565b9650506040620003858a828b0162000316565b9550506060620003988a828b0162000316565b9450506080620003ab8a828b01620002ff565b93505060a0620003be8a828b01620002ff565b92505060c0620003d18a828b01620002ff565b91505092959891949750929550565b6000620003ef6006836200049a565b9150620003fc826200054d565b600682019050919050565b6000620004166009836200049a565b9150620004238262000576565b600982019050919050565b60006200043d6005836200049a565b91506200044a826200059f565b600582019050919050565b60006200046282620003e0565b9150819050919050565b6000620004798262000407565b9150819050919050565b600062000490826200042e565b9150819050919050565b600081905092915050565b6000620004b282620004b9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006002820490506001821680620004fc57607f821691505b6020821081141562000513576200051262000519565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f474f4f474c450000000000000000000000000000000000000000000000000000600082015250565b7f4d4943524f534f46540000000000000000000000000000000000000000000000600082015250565b7f4150504c45000000000000000000000000000000000000000000000000000000600082015250565b620005d381620004a5565b8114620005df57600080fd5b50565b620005ed81620004d9565b8114620005f957600080fd5b50565b60805160601c60a051611a2f6200062560003960006106cc015260006104f10152611a2f6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146102b0578063dd62ed3e146102e0578063e9e7ce2f14610310578063efe4227a1461032e576100f5565b806370a0823114610214578063893d20e81461024457806395d89b4114610262578063a457c2d714610280576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b4578063454c18d6146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b61010261034c565b60405161010f919061139f565b60405180910390f35b610132600480360381019061012d9190611011565b6103de565b60405161013f9190611384565b60405180910390f35b610150610401565b60405161015d91906114a1565b60405180910390f35b610180600480360381019061017b9190610fbe565b61040b565b60405161018d9190611384565b60405180910390f35b61019e61043a565b6040516101ab91906114bc565b60405180910390f35b6101ce60048036038101906101c99190611011565b610443565b6040516101db9190611384565b60405180910390f35b6101fe60048036038101906101f99190611051565b61047a565b60405161020b91906114a1565b60405180910390f35b61022e60048036038101906102299190610f51565b6104a5565b60405161023b91906114a1565b60405180910390f35b61024c6104ed565b6040516102599190611369565b60405180910390f35b61026a610515565b604051610277919061139f565b60405180910390f35b61029a60048036038101906102959190611011565b6105a7565b6040516102a79190611384565b60405180910390f35b6102ca60048036038101906102c59190611011565b61061e565b6040516102d79190611384565b60405180910390f35b6102fa60048036038101906102f59190610f7e565b610641565b60405161030791906114a1565b60405180910390f35b6103186106c8565b60405161032591906114a1565b60405180910390f35b6103366106f0565b60405161034391906114a1565b60405180910390f35b60606003805461035b90611665565b80601f016020809104026020016040519081016040528092919081815260200182805461038790611665565b80156103d45780601f106103a9576101008083540402835291602001916103d4565b820191906000526020600020905b8154815290600101906020018083116103b757829003601f168201915b5050505050905090565b6000806103e9610798565b90506103f68185856107a0565b600191505092915050565b6000600254905090565b600080610416610798565b905061042385828561096b565b61042e8585856109f7565b60019150509392505050565b60006012905090565b60008061044e610798565b905061046f8185856104608589610641565b61046a91906114fe565b6107a0565b600191505092915050565b60006005838360405161048e929190611311565b908152602001604051809103902054905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60606004805461052490611665565b80601f016020809104026020016040519081016040528092919081815260200182805461055090611665565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b5050505050905090565b6000806105b2610798565b905060006105c08286610641565b905083811015610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc90611481565b60405180910390fd5b61061282868684036107a0565b60019250505092915050565b600080610629610798565b90506106368185856109f7565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060056040516107009061133f565b908152602001604051809103902054610717610c78565b6107219190611554565b600560405161072f9061132a565b908152602001604051809103902054610746610d28565b6107509190611554565b600560405161075e90611354565b908152602001604051809103902054610775610dd8565b61077f9190611554565b61078991906114fe565b61079391906114fe565b905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080790611461565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610880576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610877906113e1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161095e91906114a1565b60405180910390a3505050565b60006109778484610641565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109f157818110156109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da90611401565b60405180910390fd5b6109f084848484036107a0565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90611441565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace906113c1565b60405180910390fd5b610ae2838383610e88565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5f90611421565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bfb91906114fe565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5f91906114a1565b60405180910390a3610c72848484610e8d565b50505050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ce357600080fd5b505afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b919061109e565b5050509150508091505090565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb919061109e565b5050509150508091505090565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610e4357600080fd5b505afa158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b919061109e565b5050509150508091505090565b505050565b505050565b600081359050610ea18161199d565b92915050565b600081519050610eb6816119b4565b92915050565b60008083601f840112610ed257610ed16116fa565b5b8235905067ffffffffffffffff811115610eef57610eee6116f5565b5b602083019150836001820283011115610f0b57610f0a6116ff565b5b9250929050565b600081359050610f21816119cb565b92915050565b600081519050610f36816119cb565b92915050565b600081519050610f4b816119e2565b92915050565b600060208284031215610f6757610f66611709565b5b6000610f7584828501610e92565b91505092915050565b60008060408385031215610f9557610f94611709565b5b6000610fa385828601610e92565b9250506020610fb485828601610e92565b9150509250929050565b600080600060608486031215610fd757610fd6611709565b5b6000610fe586828701610e92565b9350506020610ff686828701610e92565b925050604061100786828701610f12565b9150509250925092565b6000806040838503121561102857611027611709565b5b600061103685828601610e92565b925050602061104785828601610f12565b9150509250929050565b6000806020838503121561106857611067611709565b5b600083013567ffffffffffffffff81111561108657611085611704565b5b61109285828601610ebc565b92509250509250929050565b600080600080600060a086880312156110ba576110b9611709565b5b60006110c888828901610f3c565b95505060206110d988828901610ea7565b94505060406110ea88828901610f27565b93505060606110fb88828901610f27565b925050608061110c88828901610f3c565b9150509295509295909350565b611122816115ae565b82525050565b611131816115c0565b82525050565b600061114383856114f3565b9350611150838584611623565b82840190509392505050565b6000611167826114d7565b61117181856114e2565b9350611181818560208601611632565b61118a8161170e565b840191505092915050565b60006111a26023836114e2565b91506111ad8261171f565b604082019050919050565b60006111c56022836114e2565b91506111d08261176e565b604082019050919050565b60006111e8601d836114e2565b91506111f3826117bd565b602082019050919050565b600061120b6026836114e2565b9150611216826117e6565b604082019050919050565b600061122e6006836114f3565b915061123982611835565b600682019050919050565b60006112516009836114f3565b915061125c8261185e565b600982019050919050565b60006112746025836114e2565b915061127f82611887565b604082019050919050565b60006112976024836114e2565b91506112a2826118d6565b604082019050919050565b60006112ba6005836114f3565b91506112c582611925565b600582019050919050565b60006112dd6025836114e2565b91506112e88261194e565b604082019050919050565b6112fc816115f6565b82525050565b61130b81611600565b82525050565b600061131e828486611137565b91508190509392505050565b600061133582611221565b9150819050919050565b600061134a82611244565b9150819050919050565b600061135f826112ad565b9150819050919050565b600060208201905061137e6000830184611119565b92915050565b60006020820190506113996000830184611128565b92915050565b600060208201905081810360008301526113b9818461115c565b905092915050565b600060208201905081810360008301526113da81611195565b9050919050565b600060208201905081810360008301526113fa816111b8565b9050919050565b6000602082019050818103600083015261141a816111db565b9050919050565b6000602082019050818103600083015261143a816111fe565b9050919050565b6000602082019050818103600083015261145a81611267565b9050919050565b6000602082019050818103600083015261147a8161128a565b9050919050565b6000602082019050818103600083015261149a816112d0565b9050919050565b60006020820190506114b660008301846112f3565b92915050565b60006020820190506114d16000830184611302565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611509826115f6565b9150611514836115f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561154957611548611697565b5b828201905092915050565b600061155f826115f6565b915061156a836115f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115a3576115a2611697565b5b828202905092915050565b60006115b9826115d6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015611650578082015181840152602081019050611635565b8381111561165f576000848401525b50505050565b6000600282049050600182168061167d57607f821691505b60208210811415611691576116906116c6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f474f4f474c450000000000000000000000000000000000000000000000000000600082015250565b7f4d4943524f534f46540000000000000000000000000000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4150504c45000000000000000000000000000000000000000000000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6119a6816115ae565b81146119b157600080fd5b50565b6119bd816115cc565b81146119c857600080fd5b50565b6119d4816115f6565b81146119df57600080fd5b50565b6119eb8161160d565b81146119f657600080fd5b5056fea26469706673582212206ae1e4bdb3ed3a2a74d40a913029ceb670cf4ab7a75053a3b9aa70d89289881264736f6c63430008070033a26469706673582212207bbed26afaba41a5231e5ad30725d3c7ac4fcac8661f34e6073ee57259f4ae1e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 979,
        "contract": "contracts/EquityTokenManager.sol:EquityTokenManager",
        "label": "personTokenMapping",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(EquityToken)971)"
      },
      {
        "astId": 981,
        "contract": "contracts/EquityTokenManager.sol:EquityTokenManager",
        "label": "s_applePriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 983,
        "contract": "contracts/EquityTokenManager.sol:EquityTokenManager",
        "label": "s_googlePriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 985,
        "contract": "contracts/EquityTokenManager.sol:EquityTokenManager",
        "label": "s_microsoftPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(EquityToken)971": {
        "encoding": "inplace",
        "label": "contract EquityToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(EquityToken)971)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract EquityToken)",
        "numberOfBytes": "32",
        "value": "t_contract(EquityToken)971"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}